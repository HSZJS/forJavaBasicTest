整理一下面试题，并用文字和代码的方式搞出来，帮助自己深化对技术的理解。
8、&和&&的区别？ 
答：&运算符有两种用法：(1)按位与；(2)逻辑与
   &&运算符是短路与运算。
   逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是true整个表达式的值才是true。
   &&之所以称为短路运算是因为，如果&&左边的表达式的值是false，右边的表达式会被直接短路掉，不会进行运算。
   很多时候我们可能都需要用&&而不是&，
   例如在验证用户登录时判定用户名不是null而且不是空字符串，
   应当写为：username != null &&!username.equals("")，
   二者的顺序不能交换，更不能用&运算符，因为第一个条件如果不成立，
   根本不能进行字符串的equals比较，否则会产生NullPointerException异常。
   注意：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。
   
   ----------------------------------------------------
   10、Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？ 
   答：Math.round(11.5)的返回值是12，Math.round(-11.5)的返回值是-11。四舍五入的原理是在参数上加0.5然后进行下取整
   11、switch 是否能作用在byte 上，是否能作用在long 上，是否能作用在String上？ 
   答：在Java 5以前，switch(expr)中，expr只能是byte、short、char、int。
   从Java 5开始，Java中引入了枚举类型，expr也可以是enum类型，从Java 7开始，
   expr还可以是字符串（String），但是长整型（long）在目前所有的版本中都是不可以的。
   12、用最有效率的方法计算2乘以8？ 
   答： 2 << 3（左移3位相当于乘以2的3次方，右移3位相当于除以2的3次方）。
   补充：我们为编写的类重写hashCode方法时，可能会看到如下所示的代码，
   其实我们不太理解为什么要使用这样的乘法运算来产生哈希码（散列码），
   而且为什么这个数是个素数，为什么通常选择31这个数？
   前两个问题的答案你可以自己百度一下，
   选择31是因为可以用移位和减法运算来代替乘法，
   从而得到更好的性能。
   说到这里你可能已经想到了：31 * num 等价于(num << 5) - num，左移5位相当于乘以2的5次方再减去自身就相当于乘以31，
   现在的VM都能自动完成这个优化。
   public class PhoneNumber {
    private int areaCode;
    private String prefix;
    private String lineNumber;

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + areaCode;
        result = prime * result
                + ((lineNumber == null) ? 0 : lineNumber.hashCode());
        result = prime * result + ((prefix == null) ? 0 : prefix.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        PhoneNumber other = (PhoneNumber) obj;
        if (areaCode != other.areaCode)
            return false;
        if (lineNumber == null) {
            if (other.lineNumber != null)
                return false;
        } else if (!lineNumber.equals(other.lineNumber))
            return false;
        if (prefix == null) {
            if (other.prefix != null)
                return false;
        } else if (!prefix.equals(other.prefix))
            return false;
        return true;
    }

}
   13、数组有没有length()方法？String有没有length()方法？ 
   答：数组没有length()方法，有length 的属性。
   String 有length()方法。
   JavaScript中，获得字符串的长度是通过length属性得到的，
   这一点容易和Java混淆。
   15、构造器（constructor）是否可被重写（override）？ 
   答：构造器不能被继承，因此不能被重写，但可以被重载。
   16、两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对？ 
   答：不对，如果两个对象x和y满足x.equals(y) == true，它们的哈希码（hash code）应当相同。
   Java对于eqauls方法和hashCode方法是这样规定的：(1)如果两个对象相同（equals方法返回true），
   那么它们的hashCode值一定要相同；(2)如果两个对象的hashCode相同，它们并不一定相同。
   当然，你未必要按照要求去做，但是如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现在Set集合中，
   同时增加新元素的效率会大大下降（对于使用哈希存储的系统，如果哈希码频繁的冲突将会造成存取性能急剧下降）。
   
   17、是否可以继承String类？ 
   答：String 类是final类，不可以被继承。
   补充：继承String本身就是一个错误的行为，
   对String类型最好的重用方式是关联关系（Has-A）
   和依赖关系（Use-A）而不是
   继承关系（Is-A）。
   
   
   
   
   
   
   
   
   
   
   
   